use std::{collections::VecDeque, fmt};

use crate::indicators::TrueRange;
use crate::{Close, High, Low, Next, Reset, Volume};

#[cfg(feature = "serde")]
use serde::{Deserialize, Serialize};

struct OHLC {
    high_price: f64,
    low_price: f64,
    close_price: f64,
}

impl High for OHLC {
    fn high(&self) -> f64 {
        self.high_price
    }
}

impl Low for OHLC {
    fn low(&self) -> f64 {
        self.low_price
    }
}

impl Close for OHLC {
    fn close(&self) -> f64 {
        self.close_price
    }
}

pub struct AverageDirectionalIndex {
    period: u8,
    firstval: bool,
    secondval: bool,
    ohlc_container: VecDeque<OHLC>,
    adx_container: VecDeque<f64>,
    prev_tr: f64,
    prev_pdm: f64,
    prev_mdm: f64,
    pdi: f64,
    mdi: f64,
    dx: f64,
    p_adx: f64,
    // m_pohlc: OHLC,
    previous_high: f64,
    previous_low: f64,
    previous_close: f64,
    true_range: TrueRange,
}

impl fmt::Display for AverageDirectionalIndex {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "ADX({})", self.period)
    }
}

pub struct AverageDirectionalIndexOutput {
    pub adx: f64,
    pub di_plus: f64,
    pub di_minus: f64,
}

impl AverageDirectionalIndex {
    pub fn new(period: u8) -> Self {
        AverageDirectionalIndex {
            period,
            firstval: false,
            secondval: false,
            ohlc_container: VecDeque::new(),
            adx_container: VecDeque::new(),
            prev_tr: 0.0,
            prev_pdm: 0.0,
            prev_mdm: 0.0,
            pdi: 0.0,
            mdi: 0.0,
            dx: 0.0,
            p_adx: 0.0,
            // m_pohlc: OHLC {
            //     high_price: 0.0,
            //     low_price: 0.0,
            //     close_price: 0.0,
            // },
            previous_high: 0.0,
            previous_low: 0.0,
            previous_close: 0.0,
            true_range: TrueRange::new(),
        }
    }
}

impl Default for AverageDirectionalIndex {
    fn default() -> Self {
        Self::new(14)
    }
}

impl Reset for AverageDirectionalIndex {
    fn reset(&mut self) {
        self.firstval = false;
        self.secondval = false;
        self.ohlc_container.clear();
        self.adx_container.clear();
        self.prev_tr = 0.0;
        self.prev_pdm = 0.0;
        self.prev_mdm = 0.0;
        self.pdi = 0.0;
        self.mdi = 0.0;
        self.dx = 0.0;
        self.p_adx = 0.0;
        // self.m_pohlc = OHLC {
        //     high_price: 0.0,
        //     low_price: 0.0,
        //     close_price: 0.0,
        // };
        self.previous_high = 0.0;
        self.previous_low = 0.0;
        self.previous_close = 0.0;
        self.true_range.reset();
    }
}

impl<T: High + Low + Close> Next<&T> for AverageDirectionalIndex {
    type Output = AverageDirectionalIndexOutput;

    fn next(&mut self, input: &T) -> AverageDirectionalIndexOutput {
        let mut dm_plus_result = 0.0;
        let mut dm_minus_result = 0.0;

        if !self.firstval {
            if self.ohlc_container.len() <= self.period as usize {
                self.ohlc_container.push_front(OHLC {
                    high_price: input.high(),
                    low_price: input.low(),
                    close_price: input.close(),
                });
                AverageDirectionalIndexOutput {
                    adx: input.high(),
                    di_plus: dm_plus_result,
                    di_minus: dm_minus_result,
                }
            } else {
                let mut tr_result = 0.0;
                let mut tr_average = 0.0;
                let mut dm_plus = 0.0;
                let mut dm_minus = 0.0;

                tr_result = self.true_range.next(input);

                // tr_average += tr_result;

                for window in self
                    .ohlc_container
                    .iter()
                    .zip(self.ohlc_container.iter().skip(1))
                {
                    let (current, next) = window;

                    dm_plus = current.high() - next.high();
                    dm_minus = next.low() - current.low();

                    if dm_plus > dm_minus {
                        dm_plus_result += dm_plus;
                    } else {
                        dm_minus_result += dm_minus;
                    }
                }

                self.firstval = true;
                self.prev_tr = tr_average - (tr_average / self.period as f64) + tr_result;
                self.prev_pdm = dm_plus_result - (dm_plus_result / self.period as f64) + dm_plus;
                self.prev_mdm = dm_minus_result - (dm_minus_result / self.period as f64) + dm_minus;

                self.ohlc_container.push_front(OHLC {
                    high_price: input.high(),
                    low_price: input.low(),
                    close_price: input.close(),
                });
                // self.m_pohlc = *self.m_ohlc_container.front().unwrap();
                self.previous_high = input.high();
                self.previous_low = input.low();
                self.previous_close = input.close();

                AverageDirectionalIndexOutput {
                    adx: self.prev_tr,
                    di_plus: dm_plus_result,
                    di_minus: dm_minus_result,
                }
            }
        } else {
            let tr = self.true_range.next(input);

            let dm_plus = input.high() - self.previous_high;
            let dm_minus = self.previous_low - input.low();

            if dm_plus > dm_minus {
                dm_plus_result += dm_plus;
            } else {
                dm_minus_result += dm_minus;
            }

            self.prev_tr = self.prev_tr - (self.prev_tr / self.period as f64) + tr;
            self.prev_pdm = self.prev_pdm - (self.prev_pdm / self.period as f64) + dm_plus_result;
            self.prev_mdm = self.prev_mdm - (self.prev_mdm / self.period as f64) + dm_minus_result;

            // self.m_pohlc = ohlc;
            self.previous_high = input.high();
            self.previous_low = input.low();
            self.previous_close = input.close();

            self.pdi = (self.prev_pdm / self.prev_tr) * 100.0;
            self.mdi = (self.prev_mdm / self.prev_tr) * 100.0;

            self.dx = ((self.pdi - self.mdi).abs() / (self.pdi + self.mdi)) * 100.0;

            if !self.secondval && self.firstval {
                if self.adx_container.len() <= self.period as usize {
                    self.adx_container.push_front(self.dx);
                    AverageDirectionalIndexOutput {
                        adx: input.high(),
                        di_plus: 0.0,
                        di_minus: 0.0,
                    }
                } else {
                    self.secondval = true;
                    self.p_adx =
                        self.adx_container.iter().sum::<f64>() / self.adx_container.len() as f64;

                    AverageDirectionalIndexOutput {
                        adx: self.p_adx,
                        di_plus: dm_plus_result,
                        di_minus: dm_minus_result,
                    }
                }
            } else {
                self.p_adx =
                    ((self.p_adx * (self.period as f64 - 1.0)) + self.dx) / self.period as f64;
                AverageDirectionalIndexOutput {
                    adx: self.p_adx,
                    di_plus: self.pdi,
                    di_minus: self.mdi,
                }
            }
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::test_helper::*;

    use High;

    #[test]
    fn test_next() {
        let mut adx = AverageDirectionalIndex::new(14);

        let bar1 = Bar::new().high(10.0).low(5.0).close(8.0);
        let bar2 = Bar::new().high(12.0).low(6.0).close(9.0);
        let bar3 = Bar::new().high(15.0).low(7.0).close(11.0);

        let output1 = adx.next(&bar1);
        assert_eq!(output1.adx, High::high(&bar1));
        assert_eq!(output1.di_plus, 0.0);
        assert_eq!(output1.di_minus, 0.0);

        let output2 = adx.next(&bar2);
        assert_eq!(output2.adx, High::high(&bar2));
        assert_eq!(output2.di_plus, 0.0);
        assert_eq!(output2.di_minus, 0.0);

        let output3 = adx.next(&bar3);
        assert_eq!(output3.adx, High::high(&bar3));
        assert_eq!(output3.di_plus, 0.0);
        assert_eq!(output3.di_minus, 0.0);
    }

    #[test]
    fn test_large_adx() {
        let high = vec![
            30.1983, 30.2776, 30.4458, 29.3478, 29.3477, 29.2886, 28.8334, 28.7346, 28.6654,
            28.8532, 28.6356, 27.6761, 27.2112, 26.8651, 27.409, 26.9441, 26.5189, 26.5189,
            27.0927, 27.686, 28.4477, 28.5267, 28.6654, 29.0116, 29.872, 29.8028, 29.7529, 30.6546,
            30.5951, 30.7635, 31.1698, 30.8923, 30.0402, 30.6645, 30.5951, 31.9724, 32.1011,
            32.0317, 31.6255, 31.8534, 32.7055, 32.7648, 32.5766, 32.1308, 33.1215, 33.1909,
            32.5172, 32.4379, 33.2207, 32.8343, 33.6169, 33.7459, 33.5971, 34.0825, 34.578,
            34.2214, 34.7663, 34.7364, 35.014, 34.9447, 34.4194, 34.3995, 34.1619, 33.3396,
            33.3892, 33.5079, 33.9638, 34.4194, 34.7167, 33.944, 33.6567, 34.5086, 34.8653,
            34.7464, 35.1725, 36.1633, 36.4504, 36.0344, 36.4504, 36.738, 36.6091, 36.827, 36.8369,
            36.8865, 36.3802, 35.9948, 35.8561, 35.8759, 35.7273, 36.0688, 35.6025, 34.9775,
            35.5827, 36.0688, 36.2076, 36.4555, 36.4359, 36.5448, 35.8107, 35.2552, 35.2058,
            34.5908, 34.7296, 34.8586, 35.3149, 35.5034, 36.6342, 37.1401, 37.2691, 37.6956,
            37.8742, 38.3801, 39.1736, 39.0546, 39.0944, 39.2729, 39.1141, 39.8581, 39.533,
            39.7392, 39.868, 39.8185, 39.6102, 39.7491, 39.5309, 39.1836, 39.8978, 39.8383,
            39.6399, 38.6975, 38.7968, 39.0844, 39.5209, 40.0368, 40.245, 40.4335, 40.2757,
            40.1458, 40.7509, 39.878, 40.2649, 39.1538, 39.2532, 40.0566, 40.4534, 40.9593,
            41.1973, 41.2867, 41.3759, 41.614, 42.1397, 42.3183, 42.3193, 42.3988, 42.5279,
            42.8655, 42.3888, 41.7931, 42.3591, 42.3194, 42.3019, 41.8328, 40.959, 41.1079,
            41.8427, 41.7832, 42.3193, 42.2498, 42.5676, 42.4485, 42.9876, 42.8158, 42.6867,
            42.9647, 43.1533, 43.5109, 43.1832, 43.4215, 43.4513, 42.8059, 42.0214, 41.8925,
            41.8526, 41.2767, 41.0285, 41.5747, 42.1009, 42.3492, 43.2129, 43.4627, 43.8286,
            43.8484, 43.8286, 44.335, 44.2854, 44.1761, 43.769, 43.2428, 44.0868, 43.8384, 43.908,
            43.5208, 43.3122, 43.9876, 44.1761, 44.1861, 44.4144, 43.9776, 43.6896, 43.8088,
            44.2257, 44.2754, 44.2854, 44.3549, 44.3846, 43.8981, 44.2446, 44.8911, 45.0502,
            45.3287, 45.7366, 46.0548, 46.0052, 46.0151, 46.0301, 46.2389, 46.2538, 46.3036,
            46.0251, 46.3036, 46.3931, 45.8957, 46.2439, 46.2737, 46.3036, 46.3931, 46.3572,
            46.1046, 45.2392, 44.3639, 44.6524, 44.6126, 44.1949, 43.7869, 43.0515, 43.5483,
            43.7372, 43.4289, 42.7923, 42.9514, 43.2797, 43.0808, 43.5582, 43.6478, 44.1152,
            44.3341, 44.6921, 44.8115, 44.7916, 44.5032, 44.5529, 44.4635, 44.6225, 45.2492,
            45.6073, 45.5775, 45.5675, 46.2937, 46.3931, 46.8009, 47.0298, 47.0993, 47.2784,
            47.1292, 47.3579, 47.6464, 47.6265, 47.7476, 47.9069, 48.0961, 47.9667, 48.3949,
            48.126, 48.1956, 48.3451, 48.2454, 48.4944, 48.5143, 48.6936, 48.6637, 48.6139,
            48.8429, 48.9923, 49.1416, 49.7093, 49.9781, 49.9084, 49.4503, 49.6694, 49.9781,
            50.1474, 50.3565, 50.4362, 50.2171, 49.4205, 50.1176, 50.0778, 49.9582, 49.1118,
            48.2952, 48.1161, 46.6025, 47.5982, 48.1858, 48.4545, 48.584, 47.3194, 47.0705,
            47.3791, 46.4332, 45.0889, 45.4474, 45.1337, 44.571, 45.3776, 45.6963, 45.7958,
            46.0547, 46.0847, 46.5725, 46.0945, 45.2681, 44.2923, 44.7205, 44.9296, 45.3478,
            46.0448, 46.5725, 46.941, 46.9809, 47.2298, 47.569, 47.0303, 46.3618, 45.8829, 45.5537,
            45.444, 44.3565, 43.5683, 42.86, 42.7218, 43.269, 43.9075, 44.2767, 44.5261, 44.9252,
            45.3941, 45.7034, 45.6335, 45.5219, 44.7057, 45.1546, 45.6535, 45.873, 45.9927,
            46.3518, 46.6112, 46.4716, 46.302, 45.9827, 46.6811, 46.5913, 46.8806, 46.8108,
            46.7409, 47.0801, 46.8407, 45.8131, 45.1347, 44.9551, 45.005, 45.6734, 45.7133,
            45.3542, 44.9252, 45.2345, 44.0173, 44.157, 44.2168, 44.0572, 44.147, 43.7479, 44.8055,
            45.1746, 45.9129, 45.9228, 46.3419, 46.5913, 46.5614, 47.2597, 47.589, 47.6887,
            47.8683, 48.14, 48.93, 49.17, 49.021, 49.16, 49.69, 49.75, 49.54, 49.53, 49.84, 49.53,
            49.05, 49.76, 49.71, 49.54, 49.87, 50.02, 50.21, 50.75, 50.64, 51.5, 51.72, 51.3,
            51.57, 51.7101, 51.69, 52.23, 52.15, 52.23, 52.45, 52.49, 52.75, 52.93, 53.04, 53.8614,
            53.81, 53.83, 54.0401, 53.77, 53.48, 53.3672, 52.88, 52.2462, 51.87, 52.79, 52.59,
            52.91, 52.45, 53.25, 53.13, 52.9, 52.7355, 53.46, 53.81, 53.94, 53.95, 54.52, 54.15,
            54.44, 54.55, 54.74, 54.62, 54.7, 54.66, 54.68, 54.76, 54.89, 54.96, 54.87, 54.86,
            54.92, 54.9, 54.8, 54.62, 55.69, 55.55, 55.76, 55.96, 56.05, 56.18, 56.36, 56.56,
            56.73, 57.02, 57.23, 57.26, 56.35, 56.49, 56.46, 56.55, 56.98, 57.35, 57.22, 56.16,
            57.18, 57.17, 57.14, 57.42, 57.97, 58.07, 58.12,
        ];
        let low = vec![
            29.4072, 29.3182, 29.9611, 28.7443, 28.5566, 28.4081, 28.0818, 27.4289, 27.6565,
            27.8345, 27.3992, 27.0927, 26.1826, 26.1332, 26.6277, 26.1332, 25.4307, 25.3518,
            25.876, 26.964, 27.1421, 28.0123, 27.884, 27.9928, 28.7643, 29.1402, 28.7127, 28.929,
            30.0304, 29.3863, 30.1365, 30.4267, 29.3467, 29.9906, 29.5152, 30.9418, 31.5364,
            31.358, 30.922, 31.1994, 32.1308, 32.2298, 31.9724, 31.5562, 32.2101, 32.6262, 31.7642,
            31.784, 32.0912, 32.1903, 32.7648, 33.0423, 33.0522, 33.3297, 33.726, 33.6962, 34.2015,
            34.3105, 34.142, 33.5674, 33.5674, 33.3692, 33.2108, 32.656, 32.7747, 32.9235, 33.082,
            33.6368, 33.8647, 33.0027, 33.0127, 32.8738, 34.1124, 33.8944, 34.4393, 35.2816,
            35.7768, 35.5985, 36.0048, 36.0839, 35.7868, 36.3318, 35.9552, 36.411, 35.8659,
            35.2516, 35.1923, 35.123, 35.2418, 35.6225, 34.7394, 34.4915, 34.9974, 34.9974,
            35.7612, 35.8307, 35.8207, 36.0985, 35.2156, 34.7593, 34.2335, 34.0252, 34.3725,
            34.2833, 34.2038, 35.1165, 35.8505, 36.4259, 36.8722, 37.3087, 37.3385, 37.8245,
            38.0825, 38.4693, 38.5586, 38.6181, 38.6876, 39.1935, 39.0944, 39.3225, 39.4513,
            39.1439, 38.9257, 39.2729, 39.0249, 38.7372, 38.886, 39.3225, 38.9653, 38.152, 38.3007,
            38.2312, 38.886, 39.4217, 39.7788, 39.9276, 39.7589, 39.3522, 39.8383, 39.4713,
            38.8464, 38.7272, 38.7075, 39.2035, 40.1359, 40.2649, 40.6717, 40.8898, 40.8799,
            41.2371, 41.5049, 41.8719, 41.9122, 41.8625, 42.1404, 42.0781, 41.4752, 41.2867,
            41.5944, 41.7335, 41.3065, 40.7107, 40.4327, 40.5419, 40.9298, 41.4752, 41.8427,
            41.7633, 41.9817, 42.0711, 42.5476, 42.5676, 42.1803, 42.2895, 42.637, 42.7561,
            42.4881, 42.7165, 42.4881, 41.8825, 41.0086, 41.247, 40.6313, 40.3532, 40.5519,
            40.9888, 41.4852, 41.7832, 42.5775, 43.0938, 43.3024, 43.2428, 43.3221, 43.8088,
            43.9378, 43.7392, 43.0442, 42.9747, 43.5506, 43.4215, 43.6995, 42.5973, 42.8059,
            43.5704, 43.6697, 43.5704, 43.352, 43.5109, 43.054, 43.0143, 43.9279, 43.64, 43.8782,
            43.8584, 43.9776, 43.4513, 43.7671, 44.4335, 44.7916, 44.9707, 45.3586, 45.6968,
            45.7466, 45.7167, 45.5078, 46.0251, 45.9157, 45.8262, 45.6769, 45.6868, 45.8759,
            45.289, 45.3685, 45.9753, 45.4083, 45.7068, 45.1896, 45.0602, 43.8069, 43.8865,
            43.8169, 43.7771, 43.0908, 42.4044, 42.653, 42.8022, 43.1901, 42.3944, 41.8969,
            42.4143, 42.5337, 42.5237, 42.5337, 42.9315, 43.6179, 44.0257, 44.2146, 44.3838,
            44.3241, 43.7174, 44.0854, 43.598, 44.1649, 44.7121, 45.2094, 45.1896, 45.1596,
            45.7466, 46.1942, 46.1543, 46.5523, 46.7313, 46.8507, 46.6617, 46.98, 47.2784, 47.348,
            47.1203, 47.0505, 47.5683, 47.7078, 47.6978, 47.5385, 47.8969, 47.8571, 47.8671,
            47.5883, 47.9367, 48.1858, 48.1658, 48.0363, 48.4297, 48.7334, 48.6538, 49.291,
            49.6594, 48.9923, 48.6936, 49.2213, 49.5151, 49.052, 49.8785, 50.0876, 49.0023,
            48.7732, 49.4005, 48.9923, 49.2213, 47.877, 47.4389, 41.3746, 44.0964, 47.1103,
            47.0007, 47.6978, 47.5286, 46.1842, 45.8756, 46.0249, 45.3577, 44.0632, 43.3065,
            44.4516, 43.0476, 43.9338, 44.8996, 45.0092, 44.9394, 44.9394, 45.8854, 44.7478,
            44.0334, 43.406, 43.5056, 44.0532, 44.4216, 45.2183, 45.2613, 46.3037, 46.4431,
            46.7509, 46.2221, 46.0426, 45.5836, 45.0948, 44.8454, 44.7057, 42.9697, 42.5407,
            41.6728, 41.992, 42.1516, 42.6006, 43.5783, 43.9774, 44.3565, 44.6957, 45.1347,
            44.8853, 44.1969, 43.9973, 43.7579, 44.4563, 45.1347, 45.2744, 45.8031, 46.1024,
            45.7732, 45.1447, 44.9651, 46.1025, 46.1423, 46.3918, 46.4117, 45.9428, 46.6811,
            46.1723, 45.1048, 44.3465, 44.6059, 44.1969, 44.9252, 45.005, 44.4563, 44.4363,
            44.3565, 43.3638, 43.1693, 43.3987, 42.87, 43.4985, 43.0795, 43.9674, 44.6259, 45.444,
            45.5188, 45.7133, 46.2122, 46.1423, 46.8307, 46.9704, 47.0801, 47.4293, 47.75, 48.1101,
            48.61, 48.42, 48.32, 49.15, 49.35, 48.59, 49.11, 48.75, 48.781, 48.2, 49.0, 48.91,
            49.0, 49.08, 49.62, 49.26, 50.28, 50.17, 50.63, 51.3, 50.42, 50.87, 50.79, 51.21,
            51.85, 51.42, 51.66, 51.84, 52.1698, 51.98, 52.575, 52.36, 53.5, 53.51, 53.4499, 53.21,
            53.1, 52.66, 52.11, 52.29, 50.85, 51.35, 52.13, 52.14, 52.17, 51.77, 52.56, 52.67,
            52.1, 51.88, 52.84, 53.21, 53.5, 53.68, 53.82, 53.6899, 53.95, 54.09, 54.27, 54.23,
            54.03, 54.06, 54.41, 54.16, 54.62, 54.79, 54.61, 54.21, 54.55, 54.73, 54.55, 54.21,
            54.95, 54.92, 55.07, 55.68, 55.32, 55.58, 55.95, 56.2, 56.41, 56.46, 56.49, 56.32,
            55.68, 55.65, 55.68, 56.05, 56.45, 56.92, 55.47, 55.39, 56.36, 56.84, 56.4, 56.9, 57.4,
            57.56, 57.75,
        ];
        let close = vec![
            29.872, 30.2381, 30.0996, 28.9028, 28.9225, 28.4775, 28.5566, 27.5576, 28.4675,
            28.2796, 27.4882, 27.231, 26.3507, 26.3309, 27.0333, 26.2221, 26.0144, 25.4605,
            27.0333, 27.4487, 28.3586, 28.4278, 27.953, 29.0116, 29.3776, 29.3576, 28.9107,
            30.6149, 30.0502, 30.189, 31.1202, 30.5356, 29.7827, 30.0402, 30.4861, 31.467, 32.0515,
            31.9724, 31.1302, 31.6551, 32.636, 32.5866, 32.1903, 32.1011, 32.9335, 33.0027,
            31.9425, 32.3883, 32.4875, 32.8046, 33.3792, 33.4188, 33.1711, 33.6268, 33.9638,
            34.0529, 34.7266, 34.6969, 34.7067, 33.8944, 33.9142, 34.0331, 33.6169, 32.7154,
            33.0819, 33.0621, 33.924, 34.0825, 33.9638, 33.3396, 33.2306, 34.4691, 34.2312,
            34.6275, 35.0536, 36.0543, 36.1038, 35.9948, 36.4011, 36.4407, 36.3318, 36.6091,
            36.4803, 36.4803, 36.3119, 35.5688, 35.222, 35.5578, 35.4896, 35.8703, 34.799, 34.7196,
            35.3049, 35.9993, 36.0786, 36.158, 36.0885, 36.1084, 35.3149, 35.1263, 34.2534, 34.432,
            34.4915, 34.6403, 35.3049, 35.4338, 36.6243, 37.0608, 37.2592, 37.6162, 37.8742,
            38.1917, 39.0347, 38.7372, 39.0347, 39.1538, 39.0249, 39.253, 39.1339, 39.7193,
            39.7193, 39.4117, 39.0644, 39.5605, 39.2827, 38.9454, 39.5506, 39.7689, 39.3126,
            38.1717, 38.7174, 38.9852, 39.4415, 39.9671, 39.9276, 40.0468, 39.9771, 40.0763,
            40.1161, 39.7093, 38.9653, 38.9356, 39.1935, 40.0368, 40.4137, 40.7609, 41.1478,
            41.1874, 41.3461, 41.475, 42.0802, 42.0703, 42.1406, 42.2696, 42.3492, 42.1505,
            41.7732, 41.4059, 42.1107, 41.9221, 41.9519, 40.7107, 40.5916, 40.9192, 41.644,
            41.7633, 41.942, 42.1803, 42.2696, 42.2795, 42.8555, 42.7561, 42.4781, 42.9052,
            42.9151, 42.8356, 43.0044, 42.8257, 42.6867, 42.0413, 41.098, 41.7931, 40.6711,
            40.8399, 40.9689, 41.0384, 42.0512, 42.2995, 43.203, 43.3122, 43.5903, 43.3421,
            43.6995, 44.1464, 44.2854, 44.0401, 43.352, 43.1336, 43.8286, 43.6796, 43.8683, 43.203,
            43.2528, 43.6995, 43.7591, 43.5803, 43.8088, 43.6002, 43.3341, 43.769, 43.9876,
            43.8188, 44.2357, 43.9876, 44.0469, 43.5109, 44.2246, 44.722, 44.9905, 45.3188,
            45.7366, 45.9753, 45.7863, 45.9256, 45.5078, 46.1743, 46.1743, 45.8957, 45.9256,
            46.3036, 46.1146, 45.5376, 46.1046, 46.1444, 45.6073, 46.3434, 45.6769, 45.2492,
            43.9263, 44.0755, 44.1152, 44.4635, 43.3194, 42.5635, 43.031, 43.4189, 43.6576,
            42.3944, 42.7524, 42.4442, 42.8818, 42.7923, 43.4388, 43.5283, 44.0854, 44.3341,
            44.6126, 44.5927, 44.5032, 43.9263, 44.3739, 44.3639, 44.523, 45.1696, 45.3089,
            45.3586, 45.5078, 46.1942, 46.2837, 46.5423, 46.9203, 47.0993, 47.1093, 46.9899,
            47.2884, 47.4177, 47.5768, 47.2896, 47.7177, 48.0488, 47.8173, 47.7476, 47.7974,
            48.0264, 48.1858, 47.9567, 47.9567, 48.4048, 48.5442, 48.4247, 48.5343, 48.823,
            48.8629, 49.1118, 49.6993, 49.9184, 49.3209, 49.291, 49.54, 49.8188, 50.0976, 50.3067,
            50.1972, 49.1318, 49.1616, 50.018, 49.0296, 49.7192, 48.2256, 47.9767, 46.3734,
            45.2183, 47.5683, 47.5185, 48.4147, 47.648, 46.7319, 46.8812, 46.234, 45.8656, 44.1628,
            44.6507, 44.4714, 44.5113, 44.0134, 45.6763, 45.4075, 44.9892, 46.0547, 46.4929,
            44.9021, 44.0831, 44.0034, 43.635, 44.8798, 45.3079, 45.298, 46.5128, 46.702, 46.8514,
            46.8906, 46.4915, 46.1324, 45.9428, 45.2444, 45.1646, 45.005, 43.269, 42.6106, 42.4909,
            42.3711, 42.5008, 43.8577, 44.0971, 44.5161, 44.6458, 45.2245, 45.4539, 45.4938,
            44.2368, 44.6159, 45.1546, 44.5361, 45.6635, 45.9528, 46.3319, 46.3119, 45.9428,
            45.6036, 45.7034, 46.5614, 46.3618, 46.8287, 46.721, 46.6511, 46.9704, 46.5639,
            45.2943, 44.9352, 44.6159, 44.6957, 45.2664, 45.444, 44.7556, 44.8154, 44.3765,
            43.5484, 43.9674, 43.4386, 43.9674, 43.5085, 43.3588, 44.6558, 45.1546, 45.9029,
            45.5936, 46.1423, 46.3219, 46.4915, 47.14, 47.3395, 47.6388, 47.8284, 47.995, 48.8299,
            48.82, 48.69, 48.67, 49.66, 49.39, 49.37, 49.29, 49.07, 49.01, 48.48, 49.66, 49.23,
            49.41, 49.75, 49.77, 50.11, 50.52, 50.42, 51.49, 51.3, 50.82, 51.19, 51.29, 51.64,
            51.89, 52.03, 52.19, 52.3, 52.18, 52.22, 52.78, 53.02, 53.67, 53.67, 53.7375, 53.45,
            53.715, 53.385, 52.51, 52.315, 51.45, 51.6, 52.43, 52.47, 52.91, 52.07, 53.12, 52.77,
            52.73, 52.085, 53.19, 53.73, 53.87, 53.845, 53.88, 54.08, 54.135, 54.495, 54.3, 54.395,
            54.16, 54.58, 54.52, 54.56, 54.89, 54.885, 54.742, 54.77, 54.67, 54.79, 54.66, 54.46,
            55.31, 55.265, 55.74, 55.92, 55.87, 56.08, 56.16, 56.555, 56.575, 57.0, 57.16, 56.51,
            56.11, 55.68, 56.45, 56.5325, 56.83, 57.18, 55.73, 56.0, 57.05, 56.955, 57.0575,
            57.375, 57.65, 58.025, 57.93,
        ];

        let expected_values = vec![
            22.3363, 21.0054, 20.3218, 19.6481, 19.1483, 18.4536, 17.2604, 16.4189, 16.5331,
            16.6967, 16.4753, 15.6925, 16.0065, 16.3638, 15.543, 14.8057, 14.9571, 15.2407,
            16.2403, 17.28, 18.2625, 19.6084, 21.2543, 22.7248, 24.5082, 26.1419, 27.871, 28.2767,
            28.6535, 28.5953, 28.2169, 26.8252, 25.6062, 24.6559, 24.427, 24.781, 25.4438, 24.418,
            23.4824, 23.6557, 24.182, 24.2638, 24.787, 26.1207, 27.5665, 28.5618, 29.8079, 31.1741,
            31.8375, 32.6363, 32.6209, 32.6568, 31.6477, 29.7165, 27.8332, 25.9739, 24.4539,
            23.5924, 22.4963, 21.8232, 20.3118, 19.583, 19.0887, 18.9529, 18.8081, 18.8258,
            17.6765, 17.2517, 17.5061, 17.9803, 18.1608, 18.0832, 17.1923, 16.0503, 16.3531,
            17.1629, 18.0431, 19.2701, 20.573, 22.2176, 24.3138, 26.1795, 27.9415, 29.7136,
            31.5391, 33.745, 35.5332, 37.3345, 39.0945, 39.8707, 40.0168, 40.2996, 39.9055,
            38.8282, 38.7136, 38.5398, 37.5168, 34.9845, 32.7934, 31.2147, 30.3758, 30.2365,
            30.3428, 30.6513, 30.5549, 29.6002, 29.4856, 28.6611, 26.8349, 24.9535, 23.3639,
            23.0106, 23.1438, 23.7933, 24.6254, 25.4846, 26.372, 27.4345, 28.8971, 30.4033,
            31.8029, 33.1744, 34.5671, 36.156, 36.0186, 35.4477, 35.5862, 35.6705, 34.7418,
            32.7041, 30.4032, 28.4487, 27.7236, 26.9692, 26.9724, 26.8065, 27.0523, 27.4948,
            28.5258, 29.5362, 29.4733, 29.7745, 30.2865, 31.1719, 31.2966, 31.707, 31.5039,
            29.9748, 28.5638, 27.4913, 27.3256, 27.4999, 27.4131, 26.178, 24.5071, 23.346, 23.4078,
            23.7434, 24.4402, 24.9634, 25.4264, 26.4142, 27.2786, 27.5883, 26.3897, 25.1442,
            25.1557, 24.9092, 24.772, 23.2815, 21.6598, 21.1475, 20.9182, 20.5167, 20.4616,
            20.7608, 20.0363, 19.5594, 19.7571, 19.3161, 18.9231, 18.6786, 18.5055, 17.2312,
            16.6254, 17.0941, 17.7502, 18.7307, 20.131, 21.773, 23.2441, 24.5237, 25.1065, 25.9395,
            26.3895, 26.5395, 26.2338, 26.4428, 26.7876, 25.4778, 24.9153, 24.4466, 22.7216,
            21.2644, 20.6006, 20.2123, 21.515, 22.6405, 23.0042, 23.3948, 24.5723, 26.2952,
            27.6728, 27.7515, 27.4093, 28.0269, 29.0694, 29.6894, 29.571, 29.4729, 28.4101,
            27.2513, 25.3298, 23.8577, 23.0469, 22.4723, 21.8144, 20.4577, 19.1071, 18.6656,
            17.9409, 17.1521, 16.9544, 16.7318, 16.4625, 17.2533, 18.1123, 19.3958, 20.8385,
            22.2543, 23.7669, 24.6552, 25.7608, 27.1178, 28.3551, 28.819, 29.4714, 30.3318,
            30.9463, 32.11, 32.6472, 33.2484, 34.0257, 34.7863, 34.4434, 34.1638, 34.2509, 34.2512,
            33.7254, 33.7312, 34.0312, 34.5885, 35.9564, 37.539, 36.731, 35.1816, 34.1399, 33.6849,
            32.1003, 30.9975, 30.1126, 28.7951, 27.9177, 26.012, 24.6994, 23.6992, 24.4042,
            25.4501, 28.8222, 34.0997, 37.411, 39.6454, 41.3453, 42.9777, 44.8777, 46.7199,
            47.9777, 49.3485, 50.9557, 52.6137, 54.6281, 56.7116, 57.4948, 57.7911, 57.9283,
            57.686, 57.4166, 56.4421, 56.1074, 56.0985, 56.3308, 55.9405, 55.2845, 54.0945,
            52.0938, 49.6174, 46.9059, 44.3426, 41.6702, 39.7056, 38.0508, 36.9358, 36.3161,
            35.9436, 35.7125, 36.6414, 37.722, 39.1211, 40.6459, 41.1575, 40.6803, 39.7264,
            38.5018, 36.8366, 34.7069, 32.3628, 30.4663, 29.4198, 28.641, 27.3073, 25.4445,
            23.8017, 22.4217, 21.5712, 21.0807, 20.1325, 18.9845, 18.1431, 17.2565, 16.4895,
            16.1457, 15.8592, 14.8377, 14.3705, 13.5216, 14.0124, 15.1686, 16.5439, 18.1661,
            18.5305, 18.8044, 19.6015, 20.3608, 20.5085, 21.5963, 22.7668, 23.741, 25.0916, 26.166,
            27.5119, 26.8843, 25.7607, 24.083, 22.5373, 21.6144, 21.0481, 20.4134, 20.6148,
            21.1316, 21.7106, 22.4301, 23.368, 24.919, 26.54, 27.6465, 28.7937, 30.286, 31.7177,
            31.4528, 31.1959, 30.2673, 29.4646, 27.6593, 26.9475, 26.1278, 25.5379, 25.4344,
            25.5322, 24.8568, 24.9503, 24.8056, 25.6503, 26.6462, 25.9007, 25.5224, 25.3326,
            25.132, 25.5729, 25.1515, 24.8603, 24.8667, 24.9238, 25.3086, 25.8876, 25.909, 26.8898,
            27.8245, 28.5397, 28.5975, 28.3785, 27.1638, 25.4599, 23.7415, 24.087, 25.2412,
            24.3808, 23.5679, 22.2292, 21.5893, 20.3975, 19.4732, 18.4674, 17.8534, 17.0014,
            16.678, 16.5469, 16.4388, 17.0717, 17.4013, 18.0695, 18.8248, 19.7593, 20.5303,
            20.7579, 21.0446, 21.3436, 20.9436, 20.8171, 20.8327, 20.3284, 18.9131, 17.6682,
            16.4615, 15.6992, 15.7786, 15.8198, 15.7874, 16.1214, 16.762, 16.4514, 16.4002,
            16.6747, 17.2725, 18.107, 19.3261, 20.7539, 21.5547, 20.6373, 20.0454, 19.5702,
            19.3091, 19.8492, 20.9136, 19.946, 19.1683, 18.7119, 18.2749, 17.1354, 16.4879,
            16.6134, 16.8539, 17.1417,
        ];

        let mut ohlc_values = Vec::new();

        println!("close.len() = {}", close.len());
        println!("high.len() = {}", high.len());
        println!("low.len() = {}", low.len());

        for i in 0..close.len() {
            let mut ohlc = OHLC {
                high_price: high[i],
                low_price: low[i],
                close_price: close[i],
            };
            ohlc_values.push(ohlc);
        }

        println!("ohlc_values.len() = {}", ohlc_values.len());

        let mut adx = AverageDirectionalIndex::new(14);

        let calculated_values = ohlc_values
            .iter()
            .map(|ohlc| adx.next(ohlc))
            .collect::<Vec<AverageDirectionalIndexOutput>>();

        assert_eq!(calculated_values.len() - 32, expected_values.len());

        let mut i = 32;
        while i < expected_values.len() {
            println!(
                "i = {}, calculated: {}, expected: {}",
                i,
                calculated_values[i].adx,
                expected_values[i - 32]
            );
            assert!((calculated_values[i].adx - expected_values[i - 32]).abs() <= 0.001);
            i += 1;
        }
    }

    #[test]
    fn test_reset() {
        let mut adx = AverageDirectionalIndex::new(14);

        let bar1 = Bar::new().high(10.0).low(5.0).close(8.0);
        let bar2 = Bar::new().high(12.0).low(6.0).close(9.0);
        let bar3 = Bar::new().high(15.0).low(7.0).close(11.0);

        let output1 = adx.next(&bar1);
        assert_eq!(output1.adx, High::high(&bar1));
        assert_eq!(output1.di_plus, 0.0);
        assert_eq!(output1.di_minus, 0.0);

        let output2 = adx.next(&bar2);
        assert_eq!(output2.adx, High::high(&bar2));
        assert_eq!(output2.di_plus, 0.0);
        assert_eq!(output2.di_minus, 0.0);

        adx.reset();

        let output3 = adx.next(&bar3);
        assert_eq!(output3.adx, High::high(&bar3));
        assert_eq!(output3.di_plus, 0.0);
        assert_eq!(output3.di_minus, 0.0);
    }

    #[test]
    fn test_default() {
        AverageDirectionalIndex::default();
    }

    #[test]
    fn test_display() {
        let adx = AverageDirectionalIndex::new(14);
        assert_eq!(format!("{}", adx), "ADX(14)");
    }

    // #[test]
    // fn test_reset() {
    //     let mut obv = OnBalanceVolume::new();

    //     let bar1 = Bar::new().close(1.5).volume(1000.0);
    //     let bar2 = Bar::new().close(4).volume(2000.0);
    //     let bar3 = Bar::new().close(8).volume(3000.0);

    //     assert_eq!(obv.next(&bar1), 1000.0);
    //     assert_eq!(obv.next(&bar2), 3000.0);
    //     assert_eq!(obv.next(&bar3), 6000.0);

    //     obv.reset();

    //     assert_eq!(obv.next(&bar1), 1000.0);
    //     assert_eq!(obv.next(&bar2), 3000.0);
    //     assert_eq!(obv.next(&bar3), 6000.0);
    // }

    // #[test]
    // fn test_default() {
    //     OnBalanceVolume::default();
    // }

    // #[test]
    // fn test_display() {
    //     let obv = OnBalanceVolume::new();
    //     assert_eq!(format!("{}", obv), "OBV");
    // }
}
